{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport CodeProModal from \"./modal\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {baseUrl} from './common';\n\nconst useEditor = \"codemirror6\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023 Josep Mulet Pol <pmulet@iedib.net>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst addCssLink = (href, id) => {\n    const linkElem = document.createElement(\"link\");\n    linkElem.id = id;\n    linkElem.setAttribute(\"rel\", \"stylesheet\");\n    linkElem.setAttribute(\"href\", href);\n    document.head.appendChild(linkElem);\n};\n\n/**\n * Handle action\n * @param {TinyMCE} editor\n */\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\nconst displayDialogue = async(editor) => {\n    const elementid = \"codepro_\" + editor.id;\n    const data = {\n        elementid: elementid\n    };\n\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n            type: CodeProModal.TYPE,\n            templateContext: data,\n            large: true,\n        });\n        modal.header.hide();\n        modal.footer.show();\n\n        const targetElem = modal.body.find(\"#codepro_\" + editor.id)[0];\n\n        let codeEditor;\n        switch (useEditor) {\n            case (\"codemirror6\"):\n                require.config({paths:\n                    {\n                        cm6: baseUrl + '/vendor/codemirror6/dist/editor.bundle'\n                    }\n                });\n                // Load cm6 on demand\n                require(['cm6'], function(CodeProEditor) {\n                    codeEditor = new CodeProEditor(targetElem);\n                    codeEditor.setValue(editor);\n                });\n                break;\n            case (\"codemirror5\"):\n                codeEditor = new CodeMirrorEditor(targetElem, editor);\n            break;\n            default:\n                codeEditor = new MonacoEditor(targetElem, editor);\n        }\n\n\n        await modal.show();\n\n        await codeEditor.create();\n\n        modal.onresize = function() {\n            codeEditor.layout();\n        };\n        modal.footer.find(\"button.btn\").on(\"click\", (evt)=>{\n            if (evt.target.classList.contains(\"btn-primary\")) {\n               codeEditor.updateChanges();\n            }\n            modal.hide();\n            codeEditor.dispose();\n            modal.destroy();\n        });\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            codeEditor.dispose();\n            modal.destroy();\n        });\n};\n\nclass CodeMirrorEditor {\n    /**\n     * @member {HTMLElement} element\n     */\n    #element;\n    #codeEditor;\n    #tinyEditor;\n    constructor(element, tinyEditor) {\n        this.#element = element;\n        this.#tinyEditor = tinyEditor;\n    }\n\n    async create() {\n        const CodeMirror = await this.#lazyLoad();\n        this.#codeEditor = new CodeMirror(this.#element, {\n            mode: \"text/html\",\n            value: this.#tinyEditor.getContent(),\n            lineNumbers: true,\n            lineWrapping: true,\n            foldGutter: true,\n            gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n            extraKeys: {\n                    \"F6\": function(cm) {\n                      cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n                    },\n                    \"Esc\": function(cm) {\n                      if (cm.getOption(\"fullScreen\")) {\n                        cm.setOption(\"fullScreen\", false);\n                      }\n                    },\n                    \"Ctrl-Q\": function(cm){ cm.foldCode(cm.getCursor()); },\n                    \"Ctrl-Space\": \"autocomplete\",\n            }\n        });\n        this.#codeEditor.foldCode(CodeMirror.Pos(0, 0));\n        this.#codeEditor.foldCode(CodeMirror.Pos(34, 0));\n    }\n\n    #lazyLoad() {\n        // <link rel=\"stylesheet\" href=\"lib/codemirror.css\"></link>\n        if (!document.head.querySelector(\"#codemirror_css\")) {\n            addCssLink(baseUrl + \"/vendor/codemirror5/lib/codemirror.css\", \"codemirror_css\");\n            addCssLink(baseUrl + \"/vendor/codemirror5/addon/display/fullscreen.css\", \"codemirror_fullscreen_css\");\n            addCssLink(baseUrl + \"/vendor/codemirror5/addon/fold/foldgutter.css\", \"codemirror_foldgutter_css\");\n            addCssLink(baseUrl + \"/vendor/codemirror5/addon/hint/show-hint.css\", \"codemirror_showhint_css\");\n        }\n\n        return new Promise((resolve)=> {\n            if (!window.cm) {\n                    require.config({\n                        packages: [{\n                        name: \"codemirror\",\n                        location: baseUrl + '/vendor/codemirror5',\n                        main: \"lib/codemirror\"\n                        }],\n                        paths: {\n                            codemirror:  baseUrl + '/vendor/codemirror5'\n                        }\n                    });\n                    require([\"codemirror/lib/codemirror\",\n                    \"codemirror/mode/htmlmixed/htmlmixed\",\n                    \"codemirror/addon/display/fullscreen\",\n                    \"codemirror/addon/hint/show-hint\",\n                    \"codemirror/addon/hint/html-hint\",\n                    \"codemirror/addon/fold/foldcode\",\n                    \"codemirror/addon/fold/foldgutter\",\n                    \"codemirror/addon/fold/brace-fold\"],\n                     function(CodeMirror) {\n                        console.log(\"requirejs resolves\", CodeMirror);\n                        resolve(CodeMirror);\n                    });\n                } else {\n                    resolve(window.cm);\n                }\n            });\n\n    }\n\n    updateChanges() {\n        this.#tinyEditor.setContent(this.#codeEditor.getValue(), {format: 'html'});\n    }\n\n    layout() {\n        this.#tinyEditor.setSize(\"100%\", \"100%\");\n        this.#tinyEditor.refresh();\n    }\n\n    dispose() {\n        // Dispose the editor\n    }\n}\n\n\nclass MonacoEditor {\n    /**\n     * @member {HTMLElement} element\n     */\n    #element;\n    #codeEditor;\n    #tinyEditor;\n    constructor(element, tinyEditor) {\n        this.#element = element;\n        this.#tinyEditor = tinyEditor;\n    }\n\n    async create() {\n        const monaco = await this.#lazyLoad();\n        this.#codeEditor = monaco.editor.create(this.#element, {\n            value: this.tinyEditor.getContent(),\n            language: 'html',\n            automaticLayout: true,\n            theme: \"vs-light\",\n        });\n    }\n\n    #lazyLoad() {\n        return new Promise((resolve)=> {\n            if (!window.monaco || !window.MonacoEditorEx) {\n                require.config({paths:\n                    {\n                        vs: baseUrl + '/vendor/monaco-editor/min/vs',\n                        tiny_codepro_vsex: baseUrl + '/vendor/monaco-editor-ex'\n                    }\n                });\n                // Load monaco on demand\n                require(['tiny_codepro_vsex', 'vs/editor/editor.main'], function(MonacoEditorEx) {\n                    console.log(\"requirejs resolves\", window.monaco, monaco, MonacoEditorEx);\n                    // Apply extensions into monaco editor\n                    MonacoEditorEx.useMonacoEx(window.monaco);\n                    resolve(window.monaco);\n                });\n            } else {\n                resolve(window.monaco);\n            }\n        });\n    }\n\n    updateChanges() {\n        this.#tinyEditor.setContent(this.#codeEditor.getValue(), {format: 'html'});\n    }\n\n    layout() {\n        this.#tinyEditor.layout();\n    }\n\n    dispose() {\n        this.#tinyEditor.dispose();\n    }\n}\n\n"],"names":["editor","displayDialogue","async","data","elementid","id","modal","ModalFactory","create","type","CodeProModal","TYPE","templateContext","large","header","hide","footer","show","targetElem","body","find","codeEditor","require","config","paths","cm6","baseUrl","CodeProEditor","setValue","onresize","layout","on","evt","target","classList","contains","updateChanges","dispose","destroy","getRoot","ModalEvents","hidden"],"mappings":"gfA4C6BA,SACzBC,gBAAgBD,eAGdC,gBAAkBC,MAAAA,eAEdC,KAAO,CACTC,UAFc,WAAaJ,OAAOK,IAMhCC,YAAcC,uBAAaC,OAAO,CAChCC,KAAMC,eAAaC,KACnBC,gBAAiBT,KACjBU,OAAO,IAEXP,MAAMQ,OAAOC,OACbT,MAAMU,OAAOC,aAEPC,WAAaZ,MAAMa,KAAKC,KAAK,YAAcpB,OAAOK,IAAI,OAExDgB,WAGIC,QAAQC,OAAO,CAACC,MACZ,CACIC,IAAKC,gBAAU,4CAIvBJ,QAAQ,CAAC,QAAQ,SAASK,eACtBN,WAAa,IAAIM,cAAcT,YAC/BG,WAAWO,SAAS5B,iBAW1BM,MAAMW,aAENI,WAAWb,SAEjBF,MAAMuB,SAAW,WACbR,WAAWS,UAEfxB,MAAMU,OAAOI,KAAK,cAAcW,GAAG,SAAUC,MACrCA,IAAIC,OAAOC,UAAUC,SAAS,gBAC/Bd,WAAWe,gBAEd9B,MAAMS,OACNM,WAAWgB,UACX/B,MAAMgC,aAEVhC,MAAMiC,UAAUR,GAAGS,sBAAYC,QAAQ,KACnCpB,WAAWgB,UACX/B,MAAMgC"}